let s:bundle = neobundle#get("vim-marching")
function! s:bundle.hooks.on_source(bundle)
  " clang コマンドの設定
  let g:marching_clang_command = "clang"

  " オプションを追加する場合
  if &filetype == 'cpp'
    let g:marching_clang_command_option="-std=c++1y"
  elseif &filetype == 'c'
    "let g:marching_clang_command_option="-std=c++1y"
  endif
  " インクルードディレクトリのパスを設定
  let g:marching_include_paths = ["/usr/include"]
  " neocomplete.vim と併用して使用する場合
  let g:marching_enable_neocomplete = 1

  if !exists('g:neocomplete#force_omni_input_patterns')
    let g:neocomplete#force_omni_input_patterns = {}
  endif

  let g:neocomplete#force_omni_input_patterns.cpp =
        \ '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'
  let g:neocomplete#force_omni_input_patterns.c =
        \ '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'

  " 処理のタイミングを制御する
  " 短いほうがより早く補完ウィンドウが表示される
  set updatetime=200

  " オムニ補完時に補完ワードを挿入したくない場合
  imap <buffer> <C-x><C-o> <Plug>(marching_start_omni_complete)

  " キャッシュを削除してからオムに補完を行う
  imap <buffer> <C-x><C-x><C-o> <Plug>(marching_force_start_omni_complete)

  " 非同期ではなくて、同期処理でコード補完を行う場合
  " let g:marching_backend = "sync_clang_command"
endfunction
unlet s:bundle
